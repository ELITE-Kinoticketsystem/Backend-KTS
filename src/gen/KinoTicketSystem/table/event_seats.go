//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var EventSeats = newEventSeatsTable("KinoTicketSystem", "event_seats", "")

type eventSeatsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnString
	Booked       mysql.ColumnBool
	BlockedUntil mysql.ColumnTimestamp
	UserID       mysql.ColumnString
	SeatID       mysql.ColumnString
	EventID      mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EventSeatsTable struct {
	eventSeatsTable

	NEW eventSeatsTable
}

// AS creates new EventSeatsTable with assigned alias
func (a EventSeatsTable) AS(alias string) *EventSeatsTable {
	return newEventSeatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EventSeatsTable with assigned schema name
func (a EventSeatsTable) FromSchema(schemaName string) *EventSeatsTable {
	return newEventSeatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EventSeatsTable with assigned table prefix
func (a EventSeatsTable) WithPrefix(prefix string) *EventSeatsTable {
	return newEventSeatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EventSeatsTable with assigned table suffix
func (a EventSeatsTable) WithSuffix(suffix string) *EventSeatsTable {
	return newEventSeatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEventSeatsTable(schemaName, tableName, alias string) *EventSeatsTable {
	return &EventSeatsTable{
		eventSeatsTable: newEventSeatsTableImpl(schemaName, tableName, alias),
		NEW:             newEventSeatsTableImpl("", "new", ""),
	}
}

func newEventSeatsTableImpl(schemaName, tableName, alias string) eventSeatsTable {
	var (
		IDColumn           = mysql.StringColumn("id")
		BookedColumn       = mysql.BoolColumn("booked")
		BlockedUntilColumn = mysql.TimestampColumn("blocked_until")
		UserIDColumn       = mysql.StringColumn("user_id")
		SeatIDColumn       = mysql.StringColumn("seat_id")
		EventIDColumn      = mysql.StringColumn("event_id")
		allColumns         = mysql.ColumnList{IDColumn, BookedColumn, BlockedUntilColumn, UserIDColumn, SeatIDColumn, EventIDColumn}
		mutableColumns     = mysql.ColumnList{BookedColumn, BlockedUntilColumn, UserIDColumn, SeatIDColumn, EventIDColumn}
	)

	return eventSeatsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Booked:       BookedColumn,
		BlockedUntil: BlockedUntilColumn,
		UserID:       UserIDColumn,
		SeatID:       SeatIDColumn,
		EventID:      EventIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
