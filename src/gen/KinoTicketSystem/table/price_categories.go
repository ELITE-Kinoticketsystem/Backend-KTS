//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PriceCategories = newPriceCategoriesTable("KinoTicketSystem", "price_categories", "")

type priceCategoriesTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnString
	CategoryName mysql.ColumnString
	Price        mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PriceCategoriesTable struct {
	priceCategoriesTable

	NEW priceCategoriesTable
}

// AS creates new PriceCategoriesTable with assigned alias
func (a PriceCategoriesTable) AS(alias string) *PriceCategoriesTable {
	return newPriceCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PriceCategoriesTable with assigned schema name
func (a PriceCategoriesTable) FromSchema(schemaName string) *PriceCategoriesTable {
	return newPriceCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PriceCategoriesTable with assigned table prefix
func (a PriceCategoriesTable) WithPrefix(prefix string) *PriceCategoriesTable {
	return newPriceCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PriceCategoriesTable with assigned table suffix
func (a PriceCategoriesTable) WithSuffix(suffix string) *PriceCategoriesTable {
	return newPriceCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPriceCategoriesTable(schemaName, tableName, alias string) *PriceCategoriesTable {
	return &PriceCategoriesTable{
		priceCategoriesTable: newPriceCategoriesTableImpl(schemaName, tableName, alias),
		NEW:                  newPriceCategoriesTableImpl("", "new", ""),
	}
}

func newPriceCategoriesTableImpl(schemaName, tableName, alias string) priceCategoriesTable {
	var (
		IDColumn           = mysql.StringColumn("id")
		CategoryNameColumn = mysql.StringColumn("category_name")
		PriceColumn        = mysql.IntegerColumn("price")
		allColumns         = mysql.ColumnList{IDColumn, CategoryNameColumn, PriceColumn}
		mutableColumns     = mysql.ColumnList{CategoryNameColumn, PriceColumn}
	)

	return priceCategoriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CategoryName: CategoryNameColumn,
		Price:        PriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
