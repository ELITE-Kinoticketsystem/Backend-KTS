//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Genres = newGenresTable("KinoTicketSystem", "genres", "")

type genresTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnString
	GenreName mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type GenresTable struct {
	genresTable

	NEW genresTable
}

// AS creates new GenresTable with assigned alias
func (a GenresTable) AS(alias string) *GenresTable {
	return newGenresTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GenresTable with assigned schema name
func (a GenresTable) FromSchema(schemaName string) *GenresTable {
	return newGenresTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GenresTable with assigned table prefix
func (a GenresTable) WithPrefix(prefix string) *GenresTable {
	return newGenresTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GenresTable with assigned table suffix
func (a GenresTable) WithSuffix(suffix string) *GenresTable {
	return newGenresTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGenresTable(schemaName, tableName, alias string) *GenresTable {
	return &GenresTable{
		genresTable: newGenresTableImpl(schemaName, tableName, alias),
		NEW:         newGenresTableImpl("", "new", ""),
	}
}

func newGenresTableImpl(schemaName, tableName, alias string) genresTable {
	var (
		IDColumn        = mysql.StringColumn("id")
		GenreNameColumn = mysql.StringColumn("genre_name")
		allColumns      = mysql.ColumnList{IDColumn, GenreNameColumn}
		mutableColumns  = mysql.ColumnList{GenreNameColumn}
	)

	return genresTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		GenreName: GenreNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
