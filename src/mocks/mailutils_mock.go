// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/utils/mailutils.go
//
// Generated by this command:
//
//	mockgen -source=./src/utils/mailutils.go -destination=./src/mocks/mailutils_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mailgun "github.com/mailgun/mailgun-go/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockMailgunInterface is a mock of MailgunInterface interface.
type MockMailgunInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMailgunInterfaceMockRecorder
}

// MockMailgunInterfaceMockRecorder is the mock recorder for MockMailgunInterface.
type MockMailgunInterfaceMockRecorder struct {
	mock *MockMailgunInterface
}

// NewMockMailgunInterface creates a new mock instance.
func NewMockMailgunInterface(ctrl *gomock.Controller) *MockMailgunInterface {
	mock := &MockMailgunInterface{ctrl: ctrl}
	mock.recorder = &MockMailgunInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailgunInterface) EXPECT() *MockMailgunInterfaceMockRecorder {
	return m.recorder
}

// NewMessage mocks base method.
func (m *MockMailgunInterface) NewMessage(from, subject, text string, to ...string) *mailgun.Message {
	m.ctrl.T.Helper()
	varargs := []any{from, subject, text}
	for _, a := range to {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMessage", varargs...)
	ret0, _ := ret[0].(*mailgun.Message)
	return ret0
}

// NewMessage indicates an expected call of NewMessage.
func (mr *MockMailgunInterfaceMockRecorder) NewMessage(from, subject, text any, to ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{from, subject, text}, to...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockMailgunInterface)(nil).NewMessage), varargs...)
}

// Send mocks base method.
func (m *MockMailgunInterface) Send(ctx context.Context, message *mailgun.Message) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Send indicates an expected call of Send.
func (mr *MockMailgunInterfaceMockRecorder) Send(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailgunInterface)(nil).Send), ctx, message)
}
