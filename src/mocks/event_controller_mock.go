// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/controllers/event_controller.go
//
// Generated by this command:
//
//	mockgen -source=./src/controllers/event_controller.go -destination=./src/mocks/event_controller_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/gen/KinoTicketSystem/model"
	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	myid "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/myid"
	gomock "go.uber.org/mock/gomock"
)

// MockEventControllerI is a mock of EventControllerI interface.
type MockEventControllerI struct {
	ctrl     *gomock.Controller
	recorder *MockEventControllerIMockRecorder
}

// MockEventControllerIMockRecorder is the mock recorder for MockEventControllerI.
type MockEventControllerIMockRecorder struct {
	mock *MockEventControllerI
}

// NewMockEventControllerI creates a new mock instance.
func NewMockEventControllerI(ctrl *gomock.Controller) *MockEventControllerI {
	mock := &MockEventControllerI{ctrl: ctrl}
	mock.recorder = &MockEventControllerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventControllerI) EXPECT() *MockEventControllerIMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventControllerI) CreateEvent(event *models.CreateEvtDTO) (*myid.UUID, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", event)
	ret0, _ := ret[0].(*myid.UUID)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventControllerIMockRecorder) CreateEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventControllerI)(nil).CreateEvent), event)
}

// GetEventById mocks base method.
func (m *MockEventControllerI) GetEventById(eventId *myid.UUID) (*models.GetSpecialEventsDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", eventId)
	ret0, _ := ret[0].(*models.GetSpecialEventsDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById.
func (mr *MockEventControllerIMockRecorder) GetEventById(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockEventControllerI)(nil).GetEventById), eventId)
}

// GetEventsForMovie mocks base method.
func (m *MockEventControllerI) GetEventsForMovie(movieId, theatreId *myid.UUID) ([]*model.Events, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForMovie", movieId, theatreId)
	ret0, _ := ret[0].([]*model.Events)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetEventsForMovie indicates an expected call of GetEventsForMovie.
func (mr *MockEventControllerIMockRecorder) GetEventsForMovie(movieId, theatreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForMovie", reflect.TypeOf((*MockEventControllerI)(nil).GetEventsForMovie), movieId, theatreId)
}

// GetSpecialEvents mocks base method.
func (m *MockEventControllerI) GetSpecialEvents() (*[]models.GetSpecialEventsDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialEvents")
	ret0, _ := ret[0].(*[]models.GetSpecialEventsDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetSpecialEvents indicates an expected call of GetSpecialEvents.
func (mr *MockEventControllerIMockRecorder) GetSpecialEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialEvents", reflect.TypeOf((*MockEventControllerI)(nil).GetSpecialEvents))
}
