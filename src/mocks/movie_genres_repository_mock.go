// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/movie_genres_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/movie_genres_repository.go -destination=./src/mocks/movie_genres_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieGenreRepositoryI is a mock of MovieGenreRepositoryI interface.
type MockMovieGenreRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockMovieGenreRepositoryIMockRecorder
}

// MockMovieGenreRepositoryIMockRecorder is the mock recorder for MockMovieGenreRepositoryI.
type MockMovieGenreRepositoryIMockRecorder struct {
	mock *MockMovieGenreRepositoryI
}

// NewMockMovieGenreRepositoryI creates a new mock instance.
func NewMockMovieGenreRepositoryI(ctrl *gomock.Controller) *MockMovieGenreRepositoryI {
	mock := &MockMovieGenreRepositoryI{ctrl: ctrl}
	mock.recorder = &MockMovieGenreRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieGenreRepositoryI) EXPECT() *MockMovieGenreRepositoryIMockRecorder {
	return m.recorder
}

// AddMovieGenre mocks base method.
func (m *MockMovieGenreRepositoryI) AddMovieGenre(movieId, genreId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieGenre", movieId, genreId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// AddMovieGenre indicates an expected call of AddMovieGenre.
func (mr *MockMovieGenreRepositoryIMockRecorder) AddMovieGenre(movieId, genreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieGenre", reflect.TypeOf((*MockMovieGenreRepositoryI)(nil).AddMovieGenre), movieId, genreId)
}

// RemoveAllGenreCombinationWithMovie mocks base method.
func (m *MockMovieGenreRepositoryI) RemoveAllGenreCombinationWithMovie(movieId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllGenreCombinationWithMovie", movieId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// RemoveAllGenreCombinationWithMovie indicates an expected call of RemoveAllGenreCombinationWithMovie.
func (mr *MockMovieGenreRepositoryIMockRecorder) RemoveAllGenreCombinationWithMovie(movieId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllGenreCombinationWithMovie", reflect.TypeOf((*MockMovieGenreRepositoryI)(nil).RemoveAllGenreCombinationWithMovie), movieId)
}

// RemoveAllMovieCombinationWithGenre mocks base method.
func (m *MockMovieGenreRepositoryI) RemoveAllMovieCombinationWithGenre(genreId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllMovieCombinationWithGenre", genreId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// RemoveAllMovieCombinationWithGenre indicates an expected call of RemoveAllMovieCombinationWithGenre.
func (mr *MockMovieGenreRepositoryIMockRecorder) RemoveAllMovieCombinationWithGenre(genreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllMovieCombinationWithGenre", reflect.TypeOf((*MockMovieGenreRepositoryI)(nil).RemoveAllMovieCombinationWithGenre), genreId)
}

// RemoveMovieGenre mocks base method.
func (m *MockMovieGenreRepositoryI) RemoveMovieGenre(movieId, genreId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMovieGenre", movieId, genreId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// RemoveMovieGenre indicates an expected call of RemoveMovieGenre.
func (mr *MockMovieGenreRepositoryIMockRecorder) RemoveMovieGenre(movieId, genreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMovieGenre", reflect.TypeOf((*MockMovieGenreRepositoryI)(nil).RemoveMovieGenre), movieId, genreId)
}
