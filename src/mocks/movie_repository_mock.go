// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/movie_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/movie_repository.go -destination=./src/mocks/movie_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemas "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models/schemas"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieRepoI is a mock of MovieRepoI interface.
type MockMovieRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepoIMockRecorder
}

// MockMovieRepoIMockRecorder is the mock recorder for MockMovieRepoI.
type MockMovieRepoIMockRecorder struct {
	mock *MockMovieRepoI
}

// NewMockMovieRepoI creates a new mock instance.
func NewMockMovieRepoI(ctrl *gomock.Controller) *MockMovieRepoI {
	mock := &MockMovieRepoI{ctrl: ctrl}
	mock.recorder = &MockMovieRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepoI) EXPECT() *MockMovieRepoIMockRecorder {
	return m.recorder
}

// AddMovieGenre mocks base method.
func (m *MockMovieRepoI) AddMovieGenre(movieId, genreId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieGenre", movieId, genreId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovieGenre indicates an expected call of AddMovieGenre.
func (mr *MockMovieRepoIMockRecorder) AddMovieGenre(movieId, genreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieGenre", reflect.TypeOf((*MockMovieRepoI)(nil).AddMovieGenre), movieId, genreId)
}

// CreateGenre mocks base method.
func (m *MockMovieRepoI) CreateGenre(genre *schemas.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", genre)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockMovieRepoIMockRecorder) CreateGenre(genre any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockMovieRepoI)(nil).CreateGenre), genre)
}

// CreateMovie mocks base method.
func (m *MockMovieRepoI) CreateMovie(movie *schemas.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieRepoIMockRecorder) CreateMovie(movie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieRepoI)(nil).CreateMovie), movie)
}

// GetGenreByName mocks base method.
func (m *MockMovieRepoI) GetGenreByName(name string) (*schemas.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByName", name)
	ret0, _ := ret[0].(*schemas.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByName indicates an expected call of GetGenreByName.
func (mr *MockMovieRepoIMockRecorder) GetGenreByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByName", reflect.TypeOf((*MockMovieRepoI)(nil).GetGenreByName), name)
}
