// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/homebrew/Cellar/go/1.21.4/libexec/src/database/sql/sql.go
//
// Generated by this command:
//
//	mockgen -source=/opt/homebrew/Cellar/go/1.21.4/libexec/src/database/sql/sql.go -destination=./src/mocks/sql_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockScanner) Scan(src any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), src)
}

// MockfinalCloser is a mock of finalCloser interface.
type MockfinalCloser struct {
	ctrl     *gomock.Controller
	recorder *MockfinalCloserMockRecorder
}

// MockfinalCloserMockRecorder is the mock recorder for MockfinalCloser.
type MockfinalCloserMockRecorder struct {
	mock *MockfinalCloser
}

// NewMockfinalCloser creates a new mock instance.
func NewMockfinalCloser(ctrl *gomock.Controller) *MockfinalCloser {
	mock := &MockfinalCloser{ctrl: ctrl}
	mock.recorder = &MockfinalCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfinalCloser) EXPECT() *MockfinalCloserMockRecorder {
	return m.recorder
}

// finalClose mocks base method.
func (m *MockfinalCloser) finalClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "finalClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// finalClose indicates an expected call of finalClose.
func (mr *MockfinalCloserMockRecorder) finalClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "finalClose", reflect.TypeOf((*MockfinalCloser)(nil).finalClose))
}

// MockstmtConnGrabber is a mock of stmtConnGrabber interface.
type MockstmtConnGrabber struct {
	ctrl     *gomock.Controller
	recorder *MockstmtConnGrabberMockRecorder
}

// MockstmtConnGrabberMockRecorder is the mock recorder for MockstmtConnGrabber.
type MockstmtConnGrabberMockRecorder struct {
	mock *MockstmtConnGrabber
}

// NewMockstmtConnGrabber creates a new mock instance.
func NewMockstmtConnGrabber(ctrl *gomock.Controller) *MockstmtConnGrabber {
	mock := &MockstmtConnGrabber{ctrl: ctrl}
	mock.recorder = &MockstmtConnGrabberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstmtConnGrabber) EXPECT() *MockstmtConnGrabberMockRecorder {
	return m.recorder
}

// grabConn mocks base method.
// func (m *MockstmtConnGrabber) grabConn(arg0 context.Context) (*driverConn, releaseConn, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "grabConn", arg0)
// 	ret0, _ := ret[0].(*driverConn)
// 	ret1, _ := ret[1].(releaseConn)
// 	ret2, _ := ret[2].(error)
// 	return ret0, ret1, ret2
// }

// grabConn indicates an expected call of grabConn.
// func (mr *MockstmtConnGrabberMockRecorder) grabConn(arg0 any) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "grabConn", reflect.TypeOf((*MockstmtConnGrabber)(nil).grabConn), arg0)
// }

// txCtx mocks base method.
func (m *MockstmtConnGrabber) txCtx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "txCtx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// txCtx indicates an expected call of txCtx.
func (mr *MockstmtConnGrabberMockRecorder) txCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "txCtx", reflect.TypeOf((*MockstmtConnGrabber)(nil).txCtx))
}

// MockResult is a mock of Result interface.
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
}

// MockResultMockRecorder is the mock recorder for MockResult.
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance.
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockResult) EXPECT() *MockResultMockRecorder {
// 	return m.recorder
// }

// // LastInsertId mocks base method.
// func (m *MockResult) LastInsertId() (int64, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "LastInsertId")
// 	ret0, _ := ret[0].(int64)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // LastInsertId indicates an expected call of LastInsertId.
// func (mr *MockResultMockRecorder) LastInsertId() *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInsertId", reflect.TypeOf((*MockResult)(nil).LastInsertId))
// }

// // RowsAffected mocks base method.
// func (m *MockResult) RowsAffected() (int64, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "RowsAffected")
// 	ret0, _ := ret[0].(int64)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // RowsAffected indicates an expected call of RowsAffected.
// func (mr *MockResultMockRecorder) RowsAffected() *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockResult)(nil).RowsAffected))
// }
