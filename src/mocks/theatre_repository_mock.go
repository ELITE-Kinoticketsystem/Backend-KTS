// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/theatre_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/theatre_repository.go -destination=./src/mocks/theatre_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/.gen/KinoTicketSystem/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTheaterRepoI is a mock of TheaterRepoI interface.
type MockTheaterRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockTheaterRepoIMockRecorder
}

// MockTheaterRepoIMockRecorder is the mock recorder for MockTheaterRepoI.
type MockTheaterRepoIMockRecorder struct {
	mock *MockTheaterRepoI
}

// NewMockTheaterRepoI creates a new mock instance.
func NewMockTheaterRepoI(ctrl *gomock.Controller) *MockTheaterRepoI {
	mock := &MockTheaterRepoI{ctrl: ctrl}
	mock.recorder = &MockTheaterRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTheaterRepoI) EXPECT() *MockTheaterRepoIMockRecorder {
	return m.recorder
}

// GetSeatsForCinemaHall mocks base method.
func (m *MockTheaterRepoI) GetSeatsForCinemaHall(cinemaHallId *uuid.UUID) ([]model.Seats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeatsForCinemaHall", cinemaHallId)
	ret0, _ := ret[0].([]model.Seats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeatsForCinemaHall indicates an expected call of GetSeatsForCinemaHall.
func (mr *MockTheaterRepoIMockRecorder) GetSeatsForCinemaHall(cinemaHallId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeatsForCinemaHall", reflect.TypeOf((*MockTheaterRepoI)(nil).GetSeatsForCinemaHall), cinemaHallId)
}
