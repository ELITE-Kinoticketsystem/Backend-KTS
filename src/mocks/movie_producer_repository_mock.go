// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/movie_producer_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/movie_producer_repository.go -destination=./src/mocks/movie_producer_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieProducerRepositoryI is a mock of MovieProducerRepositoryI interface.
type MockMovieProducerRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockMovieProducerRepositoryIMockRecorder
}

// MockMovieProducerRepositoryIMockRecorder is the mock recorder for MockMovieProducerRepositoryI.
type MockMovieProducerRepositoryIMockRecorder struct {
	mock *MockMovieProducerRepositoryI
}

// NewMockMovieProducerRepositoryI creates a new mock instance.
func NewMockMovieProducerRepositoryI(ctrl *gomock.Controller) *MockMovieProducerRepositoryI {
	mock := &MockMovieProducerRepositoryI{ctrl: ctrl}
	mock.recorder = &MockMovieProducerRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieProducerRepositoryI) EXPECT() *MockMovieProducerRepositoryIMockRecorder {
	return m.recorder
}

// AddMovieProducer mocks base method.
func (m *MockMovieProducerRepositoryI) AddMovieProducer(tx *sql.Tx, movieId, producerId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieProducer", tx, movieId, producerId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// AddMovieProducer indicates an expected call of AddMovieProducer.
func (mr *MockMovieProducerRepositoryIMockRecorder) AddMovieProducer(tx, movieId, producerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieProducer", reflect.TypeOf((*MockMovieProducerRepositoryI)(nil).AddMovieProducer), tx, movieId, producerId)
}

// RemoveAllProducerCombinationWithMovie mocks base method.
func (m *MockMovieProducerRepositoryI) RemoveAllProducerCombinationWithMovie(movieId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllProducerCombinationWithMovie", movieId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// RemoveAllProducerCombinationWithMovie indicates an expected call of RemoveAllProducerCombinationWithMovie.
func (mr *MockMovieProducerRepositoryIMockRecorder) RemoveAllProducerCombinationWithMovie(movieId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllProducerCombinationWithMovie", reflect.TypeOf((*MockMovieProducerRepositoryI)(nil).RemoveAllProducerCombinationWithMovie), movieId)
}

// RemoveMovieProducer mocks base method.
func (m *MockMovieProducerRepositoryI) RemoveMovieProducer(movieId, producerId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMovieProducer", movieId, producerId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// RemoveMovieProducer indicates an expected call of RemoveMovieProducer.
func (mr *MockMovieProducerRepositoryIMockRecorder) RemoveMovieProducer(movieId, producerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMovieProducer", reflect.TypeOf((*MockMovieProducerRepositoryI)(nil).RemoveMovieProducer), movieId, producerId)
}
