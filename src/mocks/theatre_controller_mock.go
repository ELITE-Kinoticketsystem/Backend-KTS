// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/controllers/theatre_controller.go
//
// Generated by this command:
//
//	mockgen -source=./src/controllers/theatre_controller.go -destination=./src/mocks/theatre_controller_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTheatreControllerI is a mock of TheatreControllerI interface.
type MockTheatreControllerI struct {
	ctrl     *gomock.Controller
	recorder *MockTheatreControllerIMockRecorder
}

// MockTheatreControllerIMockRecorder is the mock recorder for MockTheatreControllerI.
type MockTheatreControllerIMockRecorder struct {
	mock *MockTheatreControllerI
}

// NewMockTheatreControllerI creates a new mock instance.
func NewMockTheatreControllerI(ctrl *gomock.Controller) *MockTheatreControllerI {
	mock := &MockTheatreControllerI{ctrl: ctrl}
	mock.recorder = &MockTheatreControllerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTheatreControllerI) EXPECT() *MockTheatreControllerIMockRecorder {
	return m.recorder
}

// CreateTheatre mocks base method.
func (m *MockTheatreControllerI) CreateTheatre(arg0 *models.CreateTheatreRequest) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTheatre", arg0)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// CreateTheatre indicates an expected call of CreateTheatre.
func (mr *MockTheatreControllerIMockRecorder) CreateTheatre(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTheatre", reflect.TypeOf((*MockTheatreControllerI)(nil).CreateTheatre), arg0)
}
