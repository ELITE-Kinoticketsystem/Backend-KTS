// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/controllers/review_controller.go
//
// Generated by this command:
//
//	mockgen -source=./src/controllers/review_controller.go -destination=./src/mocks/review_controller_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReviewControllerI is a mock of ReviewControllerI interface.
type MockReviewControllerI struct {
	ctrl     *gomock.Controller
	recorder *MockReviewControllerIMockRecorder
}

// MockReviewControllerIMockRecorder is the mock recorder for MockReviewControllerI.
type MockReviewControllerIMockRecorder struct {
	mock *MockReviewControllerI
}

// NewMockReviewControllerI creates a new mock instance.
func NewMockReviewControllerI(ctrl *gomock.Controller) *MockReviewControllerI {
	mock := &MockReviewControllerI{ctrl: ctrl}
	mock.recorder = &MockReviewControllerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewControllerI) EXPECT() *MockReviewControllerIMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockReviewControllerI) CreateReview(reviewData models.CreateReviewRequest, userId *uuid.UUID) (string, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", reviewData, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockReviewControllerIMockRecorder) CreateReview(reviewData, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockReviewControllerI)(nil).CreateReview), reviewData, userId)
}

// DeleteReview mocks base method.
func (m *MockReviewControllerI) DeleteReview(id, userId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", id, userId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockReviewControllerIMockRecorder) DeleteReview(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockReviewControllerI)(nil).DeleteReview), id, userId)
}
