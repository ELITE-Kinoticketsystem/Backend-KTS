// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/controllers/actor_controller.go
//
// Generated by this command:
//
//	mockgen -source=./src/controllers/actor_controller.go -destination=./src/mocks/actor_controller_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockActorControllerI is a mock of ActorControllerI interface.
type MockActorControllerI struct {
	ctrl     *gomock.Controller
	recorder *MockActorControllerIMockRecorder
}

// MockActorControllerIMockRecorder is the mock recorder for MockActorControllerI.
type MockActorControllerIMockRecorder struct {
	mock *MockActorControllerI
}

// NewMockActorControllerI creates a new mock instance.
func NewMockActorControllerI(ctrl *gomock.Controller) *MockActorControllerI {
	mock := &MockActorControllerI{ctrl: ctrl}
	mock.recorder = &MockActorControllerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorControllerI) EXPECT() *MockActorControllerIMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorControllerI) CreateActor(actor *models.CreateActorDTO) (*uuid.UUID, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorControllerIMockRecorder) CreateActor(actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorControllerI)(nil).CreateActor), actor)
}

// GetActorById mocks base method.
func (m *MockActorControllerI) GetActorById(actorId *uuid.UUID) (*models.ActorDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorById", actorId)
	ret0, _ := ret[0].(*models.ActorDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetActorById indicates an expected call of GetActorById.
func (mr *MockActorControllerIMockRecorder) GetActorById(actorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorById", reflect.TypeOf((*MockActorControllerI)(nil).GetActorById), actorId)
}

// GetActors mocks base method.
func (m *MockActorControllerI) GetActors() (*[]models.GetActorsDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].(*[]models.GetActorsDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorControllerIMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorControllerI)(nil).GetActors))
}
