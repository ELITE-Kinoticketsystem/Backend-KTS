// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/event_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/event_repository.go -destination=./src/mocks/event_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	schemas "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models/schemas"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepo is a mock of EventRepo interface.
type MockEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepoMockRecorder
}

// MockEventRepoMockRecorder is the mock recorder for MockEventRepo.
type MockEventRepoMockRecorder struct {
	mock *MockEventRepo
}

// NewMockEventRepo creates a new mock instance.
func NewMockEventRepo(ctrl *gomock.Controller) *MockEventRepo {
	mock := &MockEventRepo{ctrl: ctrl}
	mock.recorder = &MockEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepo) EXPECT() *MockEventRepoMockRecorder {
	return m.recorder
}

// AddEventMovie mocks base method.
func (m *MockEventRepo) AddEventMovie(eventId, movieId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventMovie", eventId, movieId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventMovie indicates an expected call of AddEventMovie.
func (mr *MockEventRepoMockRecorder) AddEventMovie(eventId, movieId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventMovie", reflect.TypeOf((*MockEventRepo)(nil).AddEventMovie), eventId, movieId)
}

// CreateEvent mocks base method.
func (m *MockEventRepo) CreateEvent(event *schemas.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepoMockRecorder) CreateEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepo)(nil).CreateEvent), event)
}

// CreateEventSeat mocks base method.
func (m *MockEventRepo) CreateEventSeat(eventSeat *schemas.EventSeat) (*schemas.EventSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventSeat", eventSeat)
	ret0, _ := ret[0].(*schemas.EventSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSeat indicates an expected call of CreateEventSeat.
func (mr *MockEventRepoMockRecorder) CreateEventSeat(eventSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSeat", reflect.TypeOf((*MockEventRepo)(nil).CreateEventSeat), eventSeat)
}

// CreateEventSeatCategory mocks base method.
func (m *MockEventRepo) CreateEventSeatCategory(eventSeatCategory *schemas.EventSeatCategory) (*schemas.EventSeatCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventSeatCategory", eventSeatCategory)
	ret0, _ := ret[0].(*schemas.EventSeatCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSeatCategory indicates an expected call of CreateEventSeatCategory.
func (mr *MockEventRepoMockRecorder) CreateEventSeatCategory(eventSeatCategory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSeatCategory", reflect.TypeOf((*MockEventRepo)(nil).CreateEventSeatCategory), eventSeatCategory)
}

// CreatePriceCategory mocks base method.
func (m *MockEventRepo) CreatePriceCategory(priceCategory *schemas.PriceCategory) (*schemas.PriceCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePriceCategory", priceCategory)
	ret0, _ := ret[0].(*schemas.PriceCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePriceCategory indicates an expected call of CreatePriceCategory.
func (mr *MockEventRepoMockRecorder) CreatePriceCategory(priceCategory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePriceCategory", reflect.TypeOf((*MockEventRepo)(nil).CreatePriceCategory), priceCategory)
}

// DeleteEvent mocks base method.
func (m *MockEventRepo) DeleteEvent(arg0 *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventRepoMockRecorder) DeleteEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepo)(nil).DeleteEvent), arg0)
}

// DeleteEventMovies mocks base method.
func (m *MockEventRepo) DeleteEventMovies(eventId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventMovies", eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventMovies indicates an expected call of DeleteEventMovies.
func (mr *MockEventRepoMockRecorder) DeleteEventMovies(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventMovies", reflect.TypeOf((*MockEventRepo)(nil).DeleteEventMovies), eventId)
}

// DeleteEventSeatCategoryByEventId mocks base method.
func (m *MockEventRepo) DeleteEventSeatCategoryByEventId(eventId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventSeatCategoryByEventId", eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventSeatCategoryByEventId indicates an expected call of DeleteEventSeatCategoryByEventId.
func (mr *MockEventRepoMockRecorder) DeleteEventSeatCategoryByEventId(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSeatCategoryByEventId", reflect.TypeOf((*MockEventRepo)(nil).DeleteEventSeatCategoryByEventId), eventId)
}

// DeleteEventSeatsByEventId mocks base method.
func (m *MockEventRepo) DeleteEventSeatsByEventId(eventId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventSeatsByEventId", eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventSeatsByEventId indicates an expected call of DeleteEventSeatsByEventId.
func (mr *MockEventRepoMockRecorder) DeleteEventSeatsByEventId(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSeatsByEventId", reflect.TypeOf((*MockEventRepo)(nil).DeleteEventSeatsByEventId), eventId)
}

// UpdateEvent mocks base method.
func (m *MockEventRepo) UpdateEvent(event *schemas.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepoMockRecorder) UpdateEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepo)(nil).UpdateEvent), event)
}
