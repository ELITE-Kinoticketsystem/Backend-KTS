// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/controllers/ticket_controller.go
//
// Generated by this command:
//
//	mockgen -source=./src/controllers/ticket_controller.go -destination=./src/mocks/ticket_controller_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketControllerI is a mock of TicketControllerI interface.
type MockTicketControllerI struct {
	ctrl     *gomock.Controller
	recorder *MockTicketControllerIMockRecorder
}

// MockTicketControllerIMockRecorder is the mock recorder for MockTicketControllerI.
type MockTicketControllerIMockRecorder struct {
	mock *MockTicketControllerI
}

// NewMockTicketControllerI creates a new mock instance.
func NewMockTicketControllerI(ctrl *gomock.Controller) *MockTicketControllerI {
	mock := &MockTicketControllerI{ctrl: ctrl}
	mock.recorder = &MockTicketControllerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketControllerI) EXPECT() *MockTicketControllerIMockRecorder {
	return m.recorder
}

// GetTicketById mocks base method.
func (m *MockTicketControllerI) GetTicketById(id *uuid.UUID) (*models.TicketDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketById", id)
	ret0, _ := ret[0].(*models.TicketDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetTicketById indicates an expected call of GetTicketById.
func (mr *MockTicketControllerIMockRecorder) GetTicketById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketById", reflect.TypeOf((*MockTicketControllerI)(nil).GetTicketById), id)
}

// ValidateTicket mocks base method.
func (m *MockTicketControllerI) ValidateTicket(id *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTicket", id)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// ValidateTicket indicates an expected call of ValidateTicket.
func (mr *MockTicketControllerIMockRecorder) ValidateTicket(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTicket", reflect.TypeOf((*MockTicketControllerI)(nil).ValidateTicket), id)
}
