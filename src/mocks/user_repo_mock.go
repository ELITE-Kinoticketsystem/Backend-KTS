// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/user_repo.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/user_repo.go -destination=./src/mocks/user_repo_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	schemas "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models/schemas"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryI is a mock of UserRepositoryI interface.
type MockUserRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIMockRecorder
}

// MockUserRepositoryIMockRecorder is the mock recorder for MockUserRepositoryI.
type MockUserRepositoryIMockRecorder struct {
	mock *MockUserRepositoryI
}

// NewMockUserRepositoryI creates a new mock instance.
func NewMockUserRepositoryI(ctrl *gomock.Controller) *MockUserRepositoryI {
	mock := &MockUserRepositoryI{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryI) EXPECT() *MockUserRepositoryIMockRecorder {
	return m.recorder
}

// CheckIfEmailExists mocks base method.
func (m *MockUserRepositoryI) CheckIfEmailExists(email string) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfEmailExists", email)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// CheckIfEmailExists indicates an expected call of CheckIfEmailExists.
func (mr *MockUserRepositoryIMockRecorder) CheckIfEmailExists(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfEmailExists", reflect.TypeOf((*MockUserRepositoryI)(nil).CheckIfEmailExists), email)
}

// CheckIfUsernameExists mocks base method.
func (m *MockUserRepositoryI) CheckIfUsernameExists(username string) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUsernameExists", username)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// CheckIfUsernameExists indicates an expected call of CheckIfUsernameExists.
func (mr *MockUserRepositoryIMockRecorder) CheckIfUsernameExists(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUsernameExists", reflect.TypeOf((*MockUserRepositoryI)(nil).CheckIfUsernameExists), username)
}

// CreateUser mocks base method.
func (m *MockUserRepositoryI) CreateUser(user schemas.User) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryIMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryI)(nil).CreateUser), user)
}
