// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/user_movies_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/user_movies_repository.go -destination=./src/mocks/user_movies_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	myid "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/myid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserMovieRepositoryI is a mock of UserMovieRepositoryI interface.
type MockUserMovieRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockUserMovieRepositoryIMockRecorder
}

// MockUserMovieRepositoryIMockRecorder is the mock recorder for MockUserMovieRepositoryI.
type MockUserMovieRepositoryIMockRecorder struct {
	mock *MockUserMovieRepositoryI
}

// NewMockUserMovieRepositoryI creates a new mock instance.
func NewMockUserMovieRepositoryI(ctrl *gomock.Controller) *MockUserMovieRepositoryI {
	mock := &MockUserMovieRepositoryI{ctrl: ctrl}
	mock.recorder = &MockUserMovieRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMovieRepositoryI) EXPECT() *MockUserMovieRepositoryIMockRecorder {
	return m.recorder
}

// RemoveAllUserMovieCombinationWithMovie mocks base method.
func (m *MockUserMovieRepositoryI) RemoveAllUserMovieCombinationWithMovie(movieId *myid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllUserMovieCombinationWithMovie", movieId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// RemoveAllUserMovieCombinationWithMovie indicates an expected call of RemoveAllUserMovieCombinationWithMovie.
func (mr *MockUserMovieRepositoryIMockRecorder) RemoveAllUserMovieCombinationWithMovie(movieId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllUserMovieCombinationWithMovie", reflect.TypeOf((*MockUserMovieRepositoryI)(nil).RemoveAllUserMovieCombinationWithMovie), movieId)
}
