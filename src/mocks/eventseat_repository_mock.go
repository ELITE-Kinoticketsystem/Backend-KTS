// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/eventseat_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/eventseat_repository.go -destination=./src/mocks/eventseat_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEventSeatRepoI is a mock of EventSeatRepoI interface.
type MockEventSeatRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockEventSeatRepoIMockRecorder
}

// MockEventSeatRepoIMockRecorder is the mock recorder for MockEventSeatRepoI.
type MockEventSeatRepoIMockRecorder struct {
	mock *MockEventSeatRepoI
}

// NewMockEventSeatRepoI creates a new mock instance.
func NewMockEventSeatRepoI(ctrl *gomock.Controller) *MockEventSeatRepoI {
	mock := &MockEventSeatRepoI{ctrl: ctrl}
	mock.recorder = &MockEventSeatRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSeatRepoI) EXPECT() *MockEventSeatRepoIMockRecorder {
	return m.recorder
}

// BlockEventSeatIfAvailable mocks base method.
func (m *MockEventSeatRepoI) BlockEventSeatIfAvailable(eventId, seatId, userId *uuid.UUID, blockedUntil *time.Time) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockEventSeatIfAvailable", eventId, seatId, userId, blockedUntil)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// BlockEventSeatIfAvailable indicates an expected call of BlockEventSeatIfAvailable.
func (mr *MockEventSeatRepoIMockRecorder) BlockEventSeatIfAvailable(eventId, seatId, userId, blockedUntil any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockEventSeatIfAvailable", reflect.TypeOf((*MockEventSeatRepoI)(nil).BlockEventSeatIfAvailable), eventId, seatId, userId, blockedUntil)
}

// GetEventSeats mocks base method.
func (m *MockEventSeatRepoI) GetEventSeats(eventId *uuid.UUID) (*[]models.GetEventSeatsDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSeats", eventId)
	ret0, _ := ret[0].(*[]models.GetEventSeatsDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetEventSeats indicates an expected call of GetEventSeats.
func (mr *MockEventSeatRepoIMockRecorder) GetEventSeats(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSeats", reflect.TypeOf((*MockEventSeatRepoI)(nil).GetEventSeats), eventId)
}

// UpdateBlockedUntilTimeForUserEventSeats mocks base method.
func (m *MockEventSeatRepoI) UpdateBlockedUntilTimeForUserEventSeats(eventId, userId *uuid.UUID, blockedUntil *time.Time) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockedUntilTimeForUserEventSeats", eventId, userId, blockedUntil)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// UpdateBlockedUntilTimeForUserEventSeats indicates an expected call of UpdateBlockedUntilTimeForUserEventSeats.
func (mr *MockEventSeatRepoIMockRecorder) UpdateBlockedUntilTimeForUserEventSeats(eventId, userId, blockedUntil any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockedUntilTimeForUserEventSeats", reflect.TypeOf((*MockEventSeatRepoI)(nil).UpdateBlockedUntilTimeForUserEventSeats), eventId, userId, blockedUntil)
}
