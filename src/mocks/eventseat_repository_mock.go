// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/repositories/eventseat_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/repositories/eventseat_repository.go -destination=./src/mocks/eventseat_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	model "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/.gen/KinoTicketSystem/model"
	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEventSeatRepoI is a mock of EventSeatRepoI interface.
type MockEventSeatRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockEventSeatRepoIMockRecorder
}

// MockEventSeatRepoIMockRecorder is the mock recorder for MockEventSeatRepoI.
type MockEventSeatRepoIMockRecorder struct {
	mock *MockEventSeatRepoI
}

// NewMockEventSeatRepoI creates a new mock instance.
func NewMockEventSeatRepoI(ctrl *gomock.Controller) *MockEventSeatRepoI {
	mock := &MockEventSeatRepoI{ctrl: ctrl}
	mock.recorder = &MockEventSeatRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSeatRepoI) EXPECT() *MockEventSeatRepoIMockRecorder {
	return m.recorder
}

// BlockEventSeat mocks base method.
func (m *MockEventSeatRepoI) BlockEventSeat(eventSeatId, userId *uuid.UUID, blockedUntil *time.Time) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockEventSeat", eventSeatId, userId, blockedUntil)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// BlockEventSeat indicates an expected call of BlockEventSeat.
func (mr *MockEventSeatRepoIMockRecorder) BlockEventSeat(eventSeatId, userId, blockedUntil any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockEventSeat", reflect.TypeOf((*MockEventSeatRepoI)(nil).BlockEventSeat), eventSeatId, userId, blockedUntil)
}

// GetEventSeat mocks base method.
func (m *MockEventSeatRepoI) GetEventSeat(eventSeatId *uuid.UUID) (*model.EventSeats, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSeat", eventSeatId)
	ret0, _ := ret[0].(*model.EventSeats)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetEventSeat indicates an expected call of GetEventSeat.
func (mr *MockEventSeatRepoIMockRecorder) GetEventSeat(eventSeatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSeat", reflect.TypeOf((*MockEventSeatRepoI)(nil).GetEventSeat), eventSeatId)
}

// GetEventSeats mocks base method.
func (m *MockEventSeatRepoI) GetEventSeats(eventId *uuid.UUID) (*[]models.GetEventSeatsDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSeats", eventId)
	ret0, _ := ret[0].(*[]models.GetEventSeatsDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetEventSeats indicates an expected call of GetEventSeats.
func (mr *MockEventSeatRepoIMockRecorder) GetEventSeats(eventId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSeats", reflect.TypeOf((*MockEventSeatRepoI)(nil).GetEventSeats), eventId)
}

// ResetTimerOnUserSeats mocks base method.
func (m *MockEventSeatRepoI) ResetTimerOnUserSeats(userId *uuid.UUID, currentTime, blockedUntil *time.Time) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetTimerOnUserSeats", userId, currentTime, blockedUntil)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// ResetTimerOnUserSeats indicates an expected call of ResetTimerOnUserSeats.
func (mr *MockEventSeatRepoIMockRecorder) ResetTimerOnUserSeats(userId, currentTime, blockedUntil any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetTimerOnUserSeats", reflect.TypeOf((*MockEventSeatRepoI)(nil).ResetTimerOnUserSeats), userId, currentTime, blockedUntil)
}
