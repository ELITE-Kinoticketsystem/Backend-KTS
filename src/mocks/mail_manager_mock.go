// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/managers/mail_manager.go
//
// Generated by this command:
//
//	mockgen -source=./src/managers/mail_manager.go -destination=./src/mocks/mail_manager_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMailMgr is a mock of MailMgr interface.
type MockMailMgr struct {
	ctrl     *gomock.Controller
	recorder *MockMailMgrMockRecorder
}

// MockMailMgrMockRecorder is the mock recorder for MockMailMgr.
type MockMailMgrMockRecorder struct {
	mock *MockMailMgr
}

// NewMockMailMgr creates a new mock instance.
func NewMockMailMgr(ctrl *gomock.Controller) *MockMailMgr {
	mock := &MockMailMgr{ctrl: ctrl}
	mock.recorder = &MockMailMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailMgr) EXPECT() *MockMailMgrMockRecorder {
	return m.recorder
}

// SendOrderConfirmationMail mocks base method.
func (m *MockMailMgr) SendOrderConfirmationMail(to string, order models.GetOrderDTO) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrderConfirmationMail", to, order)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// SendOrderConfirmationMail indicates an expected call of SendOrderConfirmationMail.
func (mr *MockMailMgrMockRecorder) SendOrderConfirmationMail(to, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrderConfirmationMail", reflect.TypeOf((*MockMailMgr)(nil).SendOrderConfirmationMail), to, order)
}

// SendWelcomeMail mocks base method.
func (m *MockMailMgr) SendWelcomeMail(to, username string) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWelcomeMail", to, username)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// SendWelcomeMail indicates an expected call of SendWelcomeMail.
func (mr *MockMailMgrMockRecorder) SendWelcomeMail(to, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWelcomeMail", reflect.TypeOf((*MockMailMgr)(nil).SendWelcomeMail), to, username)
}
