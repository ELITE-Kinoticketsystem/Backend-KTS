// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/controllers/eventseats_controller.go
//
// Generated by this command:
//
//	mockgen -source=./src/controllers/eventseats_controller.go -destination=./src/mocks/eventseats_controller_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/ELITE-Kinoticketsystem/Backend-KTS/src/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEventSeatControllerI is a mock of EventSeatControllerI interface.
type MockEventSeatControllerI struct {
	ctrl     *gomock.Controller
	recorder *MockEventSeatControllerIMockRecorder
}

// MockEventSeatControllerIMockRecorder is the mock recorder for MockEventSeatControllerI.
type MockEventSeatControllerIMockRecorder struct {
	mock *MockEventSeatControllerI
}

// NewMockEventSeatControllerI creates a new mock instance.
func NewMockEventSeatControllerI(ctrl *gomock.Controller) *MockEventSeatControllerI {
	mock := &MockEventSeatControllerI{ctrl: ctrl}
	mock.recorder = &MockEventSeatControllerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSeatControllerI) EXPECT() *MockEventSeatControllerIMockRecorder {
	return m.recorder
}

// AreUserSeatsNextToEachOther mocks base method.
func (m *MockEventSeatControllerI) AreUserSeatsNextToEachOther(eventId, userId, eventSeatId *uuid.UUID) (bool, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreUserSeatsNextToEachOther", eventId, userId, eventSeatId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// AreUserSeatsNextToEachOther indicates an expected call of AreUserSeatsNextToEachOther.
func (mr *MockEventSeatControllerIMockRecorder) AreUserSeatsNextToEachOther(eventId, userId, eventSeatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreUserSeatsNextToEachOther", reflect.TypeOf((*MockEventSeatControllerI)(nil).AreUserSeatsNextToEachOther), eventId, userId, eventSeatId)
}

// BlockEventSeat mocks base method.
func (m *MockEventSeatControllerI) BlockEventSeat(eventId, eventSeatId, userId *uuid.UUID) (*time.Time, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockEventSeat", eventId, eventSeatId, userId)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// BlockEventSeat indicates an expected call of BlockEventSeat.
func (mr *MockEventSeatControllerIMockRecorder) BlockEventSeat(eventId, eventSeatId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockEventSeat", reflect.TypeOf((*MockEventSeatControllerI)(nil).BlockEventSeat), eventId, eventSeatId, userId)
}

// GetEventSeats mocks base method.
func (m *MockEventSeatControllerI) GetEventSeats(eventId, userId *uuid.UUID) (*[]models.GetSeatsForSeatSelectorDTO, *[]models.GetSeatsForSeatSelectorDTO, *time.Time, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSeats", eventId, userId)
	ret0, _ := ret[0].(*[]models.GetSeatsForSeatSelectorDTO)
	ret1, _ := ret[1].(*[]models.GetSeatsForSeatSelectorDTO)
	ret2, _ := ret[2].(*time.Time)
	ret3, _ := ret[3].(*models.KTSError)
	return ret0, ret1, ret2, ret3
}

// GetEventSeats indicates an expected call of GetEventSeats.
func (mr *MockEventSeatControllerIMockRecorder) GetEventSeats(eventId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSeats", reflect.TypeOf((*MockEventSeatControllerI)(nil).GetEventSeats), eventId, userId)
}

// GetSelectedSeats mocks base method.
func (m *MockEventSeatControllerI) GetSelectedSeats(eventId, userId *uuid.UUID) (*[]models.GetSlectedSeatsDTO, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedSeats", eventId, userId)
	ret0, _ := ret[0].(*[]models.GetSlectedSeatsDTO)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// GetSelectedSeats indicates an expected call of GetSelectedSeats.
func (mr *MockEventSeatControllerIMockRecorder) GetSelectedSeats(eventId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedSeats", reflect.TypeOf((*MockEventSeatControllerI)(nil).GetSelectedSeats), eventId, userId)
}

// UnblockAllEventSeats mocks base method.
func (m *MockEventSeatControllerI) UnblockAllEventSeats(eventId, userId *uuid.UUID) *models.KTSError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockAllEventSeats", eventId, userId)
	ret0, _ := ret[0].(*models.KTSError)
	return ret0
}

// UnblockAllEventSeats indicates an expected call of UnblockAllEventSeats.
func (mr *MockEventSeatControllerIMockRecorder) UnblockAllEventSeats(eventId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockAllEventSeats", reflect.TypeOf((*MockEventSeatControllerI)(nil).UnblockAllEventSeats), eventId, userId)
}

// UnblockEventSeat mocks base method.
func (m *MockEventSeatControllerI) UnblockEventSeat(eventId, eventSeatId, userId *uuid.UUID) (*time.Time, *models.KTSError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockEventSeat", eventId, eventSeatId, userId)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(*models.KTSError)
	return ret0, ret1
}

// UnblockEventSeat indicates an expected call of UnblockEventSeat.
func (mr *MockEventSeatControllerIMockRecorder) UnblockEventSeat(eventId, eventSeatId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockEventSeat", reflect.TypeOf((*MockEventSeatControllerI)(nil).UnblockEventSeat), eventId, eventSeatId, userId)
}
