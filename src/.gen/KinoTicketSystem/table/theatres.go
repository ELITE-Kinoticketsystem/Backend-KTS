//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Theatres = newTheatresTable("KinoTicketSystem", "theatres", "")

type theatresTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnString
	Name      mysql.ColumnString
	AddressID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TheatresTable struct {
	theatresTable

	NEW theatresTable
}

// AS creates new TheatresTable with assigned alias
func (a TheatresTable) AS(alias string) *TheatresTable {
	return newTheatresTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TheatresTable with assigned schema name
func (a TheatresTable) FromSchema(schemaName string) *TheatresTable {
	return newTheatresTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TheatresTable with assigned table prefix
func (a TheatresTable) WithPrefix(prefix string) *TheatresTable {
	return newTheatresTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TheatresTable with assigned table suffix
func (a TheatresTable) WithSuffix(suffix string) *TheatresTable {
	return newTheatresTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTheatresTable(schemaName, tableName, alias string) *TheatresTable {
	return &TheatresTable{
		theatresTable: newTheatresTableImpl(schemaName, tableName, alias),
		NEW:           newTheatresTableImpl("", "new", ""),
	}
}

func newTheatresTableImpl(schemaName, tableName, alias string) theatresTable {
	var (
		IDColumn        = mysql.StringColumn("id")
		NameColumn      = mysql.StringColumn("name")
		AddressIDColumn = mysql.StringColumn("address_id")
		allColumns      = mysql.ColumnList{IDColumn, NameColumn, AddressIDColumn}
		mutableColumns  = mysql.ColumnList{NameColumn, AddressIDColumn}
	)

	return theatresTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		AddressID: AddressIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
