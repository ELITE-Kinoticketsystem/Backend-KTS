//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Actors = newActorsTable("KinoTicketSystem", "actors", "")

type actorsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnString
	Name        mysql.ColumnString
	Birthdate   mysql.ColumnDate
	Description mysql.ColumnString
	PicURL      mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ActorsTable struct {
	actorsTable

	NEW actorsTable
}

// AS creates new ActorsTable with assigned alias
func (a ActorsTable) AS(alias string) *ActorsTable {
	return newActorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActorsTable with assigned schema name
func (a ActorsTable) FromSchema(schemaName string) *ActorsTable {
	return newActorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActorsTable with assigned table prefix
func (a ActorsTable) WithPrefix(prefix string) *ActorsTable {
	return newActorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActorsTable with assigned table suffix
func (a ActorsTable) WithSuffix(suffix string) *ActorsTable {
	return newActorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActorsTable(schemaName, tableName, alias string) *ActorsTable {
	return &ActorsTable{
		actorsTable: newActorsTableImpl(schemaName, tableName, alias),
		NEW:         newActorsTableImpl("", "new", ""),
	}
}

func newActorsTableImpl(schemaName, tableName, alias string) actorsTable {
	var (
		IDColumn          = mysql.StringColumn("id")
		NameColumn        = mysql.StringColumn("name")
		BirthdateColumn   = mysql.DateColumn("birthdate")
		DescriptionColumn = mysql.StringColumn("description")
		PicURLColumn      = mysql.StringColumn("pic_url")
		allColumns        = mysql.ColumnList{IDColumn, NameColumn, BirthdateColumn, DescriptionColumn, PicURLColumn}
		mutableColumns    = mysql.ColumnList{NameColumn, BirthdateColumn, DescriptionColumn, PicURLColumn}
	)

	return actorsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Birthdate:   BirthdateColumn,
		Description: DescriptionColumn,
		PicURL:      PicURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
