//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Addresses = newAddressesTable("KinoTicketSystem", "addresses", "")

type addressesTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnString
	Street   mysql.ColumnString
	StreetNr mysql.ColumnString
	Zipcode  mysql.ColumnString
	City     mysql.ColumnString
	Country  mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AddressesTable struct {
	addressesTable

	NEW addressesTable
}

// AS creates new AddressesTable with assigned alias
func (a AddressesTable) AS(alias string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AddressesTable with assigned schema name
func (a AddressesTable) FromSchema(schemaName string) *AddressesTable {
	return newAddressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AddressesTable with assigned table prefix
func (a AddressesTable) WithPrefix(prefix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AddressesTable with assigned table suffix
func (a AddressesTable) WithSuffix(suffix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAddressesTable(schemaName, tableName, alias string) *AddressesTable {
	return &AddressesTable{
		addressesTable: newAddressesTableImpl(schemaName, tableName, alias),
		NEW:            newAddressesTableImpl("", "new", ""),
	}
}

func newAddressesTableImpl(schemaName, tableName, alias string) addressesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		StreetColumn   = mysql.StringColumn("street")
		StreetNrColumn = mysql.StringColumn("street_nr")
		ZipcodeColumn  = mysql.StringColumn("zipcode")
		CityColumn     = mysql.StringColumn("city")
		CountryColumn  = mysql.StringColumn("country")
		allColumns     = mysql.ColumnList{IDColumn, StreetColumn, StreetNrColumn, ZipcodeColumn, CityColumn, CountryColumn}
		mutableColumns = mysql.ColumnList{StreetColumn, StreetNrColumn, ZipcodeColumn, CityColumn, CountryColumn}
	)

	return addressesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Street:   StreetColumn,
		StreetNr: StreetNrColumn,
		Zipcode:  ZipcodeColumn,
		City:     CityColumn,
		Country:  CountryColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
