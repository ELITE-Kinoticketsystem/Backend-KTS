//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ActorPictures = newActorPicturesTable("KinoTicketSystem", "actor_pictures", "")

type actorPicturesTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnString
	ActorID mysql.ColumnString
	PicURL  mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ActorPicturesTable struct {
	actorPicturesTable

	NEW actorPicturesTable
}

// AS creates new ActorPicturesTable with assigned alias
func (a ActorPicturesTable) AS(alias string) *ActorPicturesTable {
	return newActorPicturesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActorPicturesTable with assigned schema name
func (a ActorPicturesTable) FromSchema(schemaName string) *ActorPicturesTable {
	return newActorPicturesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActorPicturesTable with assigned table prefix
func (a ActorPicturesTable) WithPrefix(prefix string) *ActorPicturesTable {
	return newActorPicturesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActorPicturesTable with assigned table suffix
func (a ActorPicturesTable) WithSuffix(suffix string) *ActorPicturesTable {
	return newActorPicturesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActorPicturesTable(schemaName, tableName, alias string) *ActorPicturesTable {
	return &ActorPicturesTable{
		actorPicturesTable: newActorPicturesTableImpl(schemaName, tableName, alias),
		NEW:                newActorPicturesTableImpl("", "new", ""),
	}
}

func newActorPicturesTableImpl(schemaName, tableName, alias string) actorPicturesTable {
	var (
		IDColumn       = mysql.StringColumn("id")
		ActorIDColumn  = mysql.StringColumn("actor_id")
		PicURLColumn   = mysql.StringColumn("pic_url")
		allColumns     = mysql.ColumnList{IDColumn, ActorIDColumn, PicURLColumn}
		mutableColumns = mysql.ColumnList{ActorIDColumn, PicURLColumn}
	)

	return actorPicturesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		ActorID: ActorIDColumn,
		PicURL:  PicURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
