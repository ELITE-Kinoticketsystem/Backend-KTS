//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PaymentMethods = newPaymentMethodsTable("KinoTicketSystem", "payment_methods", "")

type paymentMethodsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnString
	Methodname mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PaymentMethodsTable struct {
	paymentMethodsTable

	NEW paymentMethodsTable
}

// AS creates new PaymentMethodsTable with assigned alias
func (a PaymentMethodsTable) AS(alias string) *PaymentMethodsTable {
	return newPaymentMethodsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PaymentMethodsTable with assigned schema name
func (a PaymentMethodsTable) FromSchema(schemaName string) *PaymentMethodsTable {
	return newPaymentMethodsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PaymentMethodsTable with assigned table prefix
func (a PaymentMethodsTable) WithPrefix(prefix string) *PaymentMethodsTable {
	return newPaymentMethodsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PaymentMethodsTable with assigned table suffix
func (a PaymentMethodsTable) WithSuffix(suffix string) *PaymentMethodsTable {
	return newPaymentMethodsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPaymentMethodsTable(schemaName, tableName, alias string) *PaymentMethodsTable {
	return &PaymentMethodsTable{
		paymentMethodsTable: newPaymentMethodsTableImpl(schemaName, tableName, alias),
		NEW:                 newPaymentMethodsTableImpl("", "new", ""),
	}
}

func newPaymentMethodsTableImpl(schemaName, tableName, alias string) paymentMethodsTable {
	var (
		IDColumn         = mysql.StringColumn("id")
		MethodnameColumn = mysql.StringColumn("methodname")
		allColumns       = mysql.ColumnList{IDColumn, MethodnameColumn}
		mutableColumns   = mysql.ColumnList{MethodnameColumn}
	)

	return paymentMethodsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Methodname: MethodnameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
